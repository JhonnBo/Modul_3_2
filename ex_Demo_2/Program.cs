namespace ex_Demo_2
{
    internal class Program
    {
        static void Main(string[] args)
        {
            ExcDemo2();        }

        // =======================================================================
        // ----------------------- ExcDemo2 --------------------------------------
        // =======================================================================
        public static void ExcDemo2()
        {
            int[] nums = new int[4];
            try
            {
                Console.WriteLine("Перед генерированием исключения");
                for (int i = 0; i < 10; i++)
                {
                    nums[i] = i;
                    Console.WriteLine("nums[{0}]: {1}", i, nums[i]);
                }
                Console.WriteLine("Этот текст не отображается");
            }
            catch (IndexOutOfRangeException ex)
            {
                Console.WriteLine("стандартное сообщение: ");
                Console.WriteLine(ex); // Вызов ToString() 
                Console.WriteLine("Stack trace: " + ex.StackTrace);
                Console.WriteLine("Message: " + ex.Message);
                Console.WriteLine("TargetSite: " + ex.TargetSite);
            }
            Console.WriteLine("После catch-инструкции.");
        }
    }
}

//В.Net Framework используется так называемая структурированная обработка
//исключений — методика для генерации и выявления ошибок в исполняющей среде.

//Любая исключительная ситуация содержит набор свойств, позволяющих получить 
//детальную информацию о ней. Это возможно по той причине, что каждая 
//исключительная ситуация представлена 
//классом наследником от базового класса System.Exception или его потомка

//Базовым для всех типов исключений является тип Exception. Этот тип определяет
//ряд свойств, с помощью которых можно получить информацию об исключении.

// -- InnerException: хранит информацию об исключении, которое послужило
//    причиной текущего исключения

// -- Message: хранит сообщение об исключении, текст ошибки

// -- Source: хранит имя объекта или сборки, которое вызвало исключение

// -- StackTrace: возвращает строковое представление стека вызывов,
//    которые привели к возникновению исключения

// -- TargetSite: возвращает метод, в котором и было вызвано исключение